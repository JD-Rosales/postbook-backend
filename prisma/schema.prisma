// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  profile    Profile?
  posts      Post[]
  likedPosts PostLike[]
  followers  Follow[]   @relation("following")
  following  Follow[]   @relation("follower")
}

model Follow {
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model Profile {
  firstName       String
  middleName      String?
  lastName        String
  profilePhoto    String?
  profilePublicId String?
  coverPhoto      String?
  coverPublicId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int      @unique
}

model Post {
  id                 Int        @id @default(autoincrement())
  postType           String
  photo              String?
  photoPublicId      String?
  text               String?
  likesCount         Int        @default(0)
  likes              PostLike[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  author             User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId           Int
  sharedPost         Post?      @relation("sharedPost", fields: [sharedPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sharedPostId       Int?
  sharedPostRelation Post[]     @relation("sharedPost")

  @@index([authorId])
  @@index([sharedPostId])
}

model PostLike {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}
